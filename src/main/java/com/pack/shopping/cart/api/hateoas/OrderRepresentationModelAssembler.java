package com.pack.shopping.cart.api.hateoas;

import org.springframework.hateoas.server.mvc.RepresentationModelAssemblerSupport;
import org.springframework.stereotype.Component;

import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.linkTo;
import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;

import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

import org.springframework.beans.BeanUtils;

import com.pack.shopping.cart.api.controller.OrderRestController;
import com.pack.shopping.cart.api.dto.OrderDTO;
import com.pack.shopping.cart.api.entity.OrderEntity;
import com.pack.shopping.cart.api.service.ItemService;

@Component
public class OrderRepresentationModelAssembler extends RepresentationModelAssemblerSupport<OrderEntity, OrderDTO> {

    private UserRepresentationModelAssembler uAssembler;
    private CardRepresentationModelAssembler cAssembler;
    private ItemService itemService;

    /**
     * Creates a new {@link RepresentationModelAssemblerSupport} using the given
     * controller class and
     * resource type.
     */
    public OrderRepresentationModelAssembler(UserRepresentationModelAssembler uAssembler,
            CardRepresentationModelAssembler cAssembler,
            ItemService itemService) {
        super(OrderRestController.class, OrderDTO.class);
        this.uAssembler = uAssembler;
        this.cAssembler = cAssembler;
        this.itemService = itemService;
    }

    /**
     * Coverts the Order entity to resource
     *
     * @param entity
     */
    @Override
    public OrderDTO toModel(OrderEntity entity) {
        OrderDTO resource = createModelWithId(entity.getOrderId(), entity);
        BeanUtils.copyProperties(entity, resource);
        resource.orderId(entity.getOrderId().toString())
                .customer(uAssembler.toModel(entity.getUserEntity()))
                .card(cAssembler.toModel(entity.getCardEntity()))
                .items(itemService.toModelList(entity.getItems()))
                .date(entity.getOrderDate());
        // Self link generated by createModelWithId has missing api path. Therefore
        // generating additionally.
        // can be removed once fixed.
        resource.add(linkTo(methodOn(OrderRestController.class).getByOrderId(entity.getOrderId().toString()))
                .withSelfRel());
        return resource;
    }

    /**
     * Coverts the collection of Product entities to list of resources.
     *
     * @param entities
     */
    public List<OrderDTO> toListModel(Iterable<OrderEntity> entities) {
        if (Objects.isNull(entities)) {
            return Collections.emptyList();
        }
        return StreamSupport.stream(entities.spliterator(), false).map(e -> toModel(e))
                .collect(Collectors.toList());
    }

}
