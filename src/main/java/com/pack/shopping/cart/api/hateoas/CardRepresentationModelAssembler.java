package com.pack.shopping.cart.api.hateoas;

import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

import org.springframework.beans.BeanUtils;
import org.springframework.hateoas.server.mvc.RepresentationModelAssemblerSupport;
import org.springframework.stereotype.Component;

import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.linkTo;
import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;

import com.pack.shopping.cart.api.controller.CardRestController;
import com.pack.shopping.cart.api.dto.CardDTO;
import com.pack.shopping.cart.api.entity.CardEntity;

@Component
public class CardRepresentationModelAssembler extends RepresentationModelAssemblerSupport<CardEntity, CardDTO> {

    /**
     * Creates a new {@link RepresentationModelAssemblerSupport} using the given
     * controller class and
     * resource type.
     */
    public CardRepresentationModelAssembler() {
        super(CardRestController.class, CardDTO.class);
    }

    /**
     * Coverts the Card entity to resource
     * 
     * @param entity
     * @return
     */
    @Override
    public CardDTO toModel(CardEntity entity) {
        String uid = Objects.nonNull(entity.getUser()) ? entity.getUser().getUserId().toString() : null;
        CardDTO resource = createModelWithId(entity.getCardId(), entity);
        BeanUtils.copyProperties(entity, resource);
        resource.cardId(entity.getCardId().toString()).cardNumber(entity.getNumber())
                .cvv(entity.getCvv()).expires(entity.getExpires()).userId(uid);
        // Self link generated by createModelWithId has missing api path. Therefore
        // generating additionally.
        // can be removed once fixed.
        resource.add(
                linkTo(methodOn(CardRestController.class).getCardById(entity.getCardId().toString())).withSelfRel());
        return resource;
    }

    /**
     * Coverts the collection of Card entities to list of resources.
     * 
     * @param entities
     * @return
     */
    public List<CardDTO> toListModel(Iterable<CardEntity> entities) {
        if (Objects.isNull(entities))
            return Collections.emptyList();
        return StreamSupport.stream(entities.spliterator(), false).map(e -> toModel(e)).collect(Collectors.toList());
    }

}
