package com.pack.shopping.cart.api.hateoas;

import org.springframework.beans.BeanUtils;
import org.springframework.hateoas.server.mvc.RepresentationModelAssemblerSupport;

import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.linkTo;
import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;

import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

import com.pack.shopping.cart.api.controller.CustomerRestContoller;
import com.pack.shopping.cart.api.dto.UserDTO;
import com.pack.shopping.cart.api.entity.UserEntity;

public class UserRepresentationModelAssembler extends RepresentationModelAssemblerSupport<UserEntity, UserDTO> {

    /**
     * Creates a new {@link RepresentationModelAssemblerSupport} using the given
     * controller class and
     * resource type.
     */
    public UserRepresentationModelAssembler() {
        super(CustomerRestContoller.class, UserDTO.class);
    }

    /**
     * Coverts the User entity to resource
     *
     * @param entity
     */
    @Override
    public UserDTO toModel(UserEntity entity) {
        UserDTO resource = createModelWithId(entity.getUserId(), entity);
        BeanUtils.copyProperties(entity, resource);
        resource.userId(entity.getUserId().toString());
        if (entity != null) {
            if (entity.getCard() != null && entity.getCard().size() > 0) {
                resource.setCardId(entity.getCard().get(0).getCardId().toString());
            }
        }
        // Self link generated by createModelWithId has missing api path. Therefore
        // generating additionally.
        // can be removed once fixed.
        resource.add(
                linkTo(methodOn(CustomerRestContoller.class).getCustomerById(entity.getUserId().toString()))
                        .withSelfRel());
        resource.add(
                linkTo(methodOn(CustomerRestContoller.class).getAllCustomers()).withRel("customers"));
        return resource;
    }

    /**
     * Coverts the collection of User entities to list of resources.
     *
     * @param entities
     */
    public List<UserDTO> toListModel(Iterable<UserEntity> entities) {
        if (Objects.isNull(entities)) {
            return Collections.emptyList();
        }
        return StreamSupport.stream(entities.spliterator(), false).map(e -> toModel(e))
                .collect(Collectors.toList());
    }
}
